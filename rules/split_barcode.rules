import glob
from Bio import SeqIO
from string import ascii_lowercase
import itertools
import os
import math
import re

CONTRACTS = []
SAMPLES = []
DIRS = []
SUFFIX = []
D_LIB_TYPE = {}

with open(SAM_BARCODE_INFO) as in_handle:
    for line in in_handle:
        line = line.strip()
        dir = line.split()[0] + "/" + line.split()[1] + "_" + line.split()[3]
        CONTRACTS.append(line.split()[0])
        SAMPLES.append(line.split()[1])
        DIRS.append(dir)
        D_LIB_TYPE[dir] = line.split()[4]
CONTRACTS = list(set(CONTRACTS))

def iter_all_strings():
    size=2
    while True:
        for s in itertools.product(ascii_lowercase, repeat=size):
            yield "".join(s)
        size += 1


for s in iter_all_strings():
    SUFFIX.append(s)
    if len(SUFFIX) == SPLIT_FILES_NUM:
        break


rule merge_split:
    input:
        expand("split/Split/" + LIBRARY + ".fastq.{suffix}.info.log", suffix = SUFFIX)
    params:
        prefix = "split/Split/{dir}/" + LIBRARY + ".{pair}.fastq",
        job_name = "MeSp",
    output:
        "Split/{dir}/" + LIBRARY + ".{pair}.fastq"
    shell:
        "cat {params.prefix}.* > {output}"


def get_split_fq_done(wildcards):
    if os.path.exists(LIBRARY + '.R1.fastq.gz') and os.path.exists(LIBRARY + '.R2.fastq.gz'):
        return ['split/split_fq.R1.fastq.gz.done', 'split/split_fq.R2.fastq.gz.done', 'sam_barcode.all']
    elif os.path.exists(LIBRARY + '.R1.fastq') and os.path.exists(LIBRARY + '.R2.fastq'):
        return ['split/split_fq.R1.fastq.done', 'split/split_fq.R2.fastq.done', 'sam_barcode.all']
    else:
        print("Error: illegal input files")

SPLIT_BARCODE_VERSION = os.popen(ENV_BIN + "python " + SCRIPTS_BIN + "split_barcode.py --version").read().strip()
rule split_barcode:
    input:
         get_split_fq_done
    params:
        read1 = "split/" + LIBRARY + ".R1.fastq.{suffix}",
        read2 = "split/" + LIBRARY + ".R2.fastq.{suffix}",
        job_name = "SpBa",
        barcode_name = BARCODE_NAME
    output:
        "split/Split/" + LIBRARY + ".fastq.{suffix}.info.log"
    version:
        SPLIT_BARCODE_VERSION
    shell:
        ENV_BIN + "python " + SCRIPTS_BIN + "split_barcode.py"
        " -a {params.read1}"
        " -b {params.read2}"
        " -n {params.barcode_name}"
        " -s {input[2]}"
        " -w split/Split"


rule split_fq:
    input:
        LIBRARY + ".{pair}.fastq{file_type,.*}"
    params:
        prefix = "split/" + LIBRARY + ".{pair}.fastq.",
        split_files = SPLIT_FILES_NUM,
        job_name = "SpFq",
    output:
        touch("split/split_fq.{pair}.fastq{file_type, .*}.done"),
    run:
        if wildcards.file_type == '.gz':
            wc_out = os.popen("gzip -dc {0} | wc -l".format(input)).read().strip()
            split_lines = math.ceil(int(wc_out)//4/params.split_files)*4
            shell("gzip -dc {input} | split -l {split_lines} - {params.prefix}")
        elif wildcards.file_type == '':
            wc_out = os.popen("wc -l {0}".format(input)).read().split()[0].strip()
            print(wc_out)
            split_lines = math.ceil(int(wc_out)//4/params.split_files)*4
            shell("split -l {split_lines} {input} {params.prefix}")

