from snakemake.utils import report
import os


rule report:
    input:
        unalign_fq = "Split/Unalign/" + LIBRARY + ".R1.fastq",
        stat_files = expand("QC/{dir}/stat", dir = DIRS),
        T1 = expand("QC/{contract}/{contract}.clean_fastqc.html", contract=CONTRACTS),
    params:
        info_log = expand("split/Split/" + LIBRARY + ".fastq.{suffix}.info.log", suffix = SUFFIX),
    output:
        LIBRARY + ".report.html"
    run:
        num_contract = len(CONTRACTS)
        num_sample = len(SAMPLES)
        wc_unalign_fq = int(os.popen("wc -l {0}".format(input.unalign_fq)).read().split()[0].strip())

        d_unalign_pair = {}
        pair_table = ""
        for file in params.info_log:
            with open(file) as F:
                for line in F:
                    try:
                        d_unalign_pair[line.split(":")[-2]] += int(line.strip().split(":")[-1])
                    except KeyError:
                        d_unalign_pair[line.split(":")[-2]] = 1
        l_unalign_pair = sorted(d_unalign_pair.items(), key=lambda d:d[1], reverse = True)
        for (k, v) in l_unalign_pair[:10]:
            pair_table += "{p:<20s} {n:<20d}\n".format(p=k, n=v)
        pair_table.strip()

        data_table = ""
        sum_raw = 0
        for file in input.stat_files:
            with open(file) as F:
                for line in F:
                    sum_raw += int(line.split()[2])
                    data_table += line
        data_table = data_table.strip()
        unalign_ratio = "{0:.2f}%".format(wc_unalign_fq/(wc_unalign_fq+sum_raw*4)*100)
        report("""
        {LIBRARY} Data QC Workflow Report
        ===========================================================================================

        Introduction:
        -------------
        This flow contains {num_contract} contracts and {num_sample} samples in total. Reads were split to the each sample,
        assembled by PandaSeq, removed with the low average quality below 20.

        FastQC Report:
        --------------
        FastQC report for each contract(see: FastQC_Reports_)

        Data statistics:
        ----------------
        Unalign ratio: {unalign_ratio}

        Data statistics table:

        ====================  ===============  ==========  ==========  ==========  ==========  ==========
        Contract              Sample           Raw reads   Pand reads  HQ reads    HQ ratio    Total ratio
        ====================  ===============  ==========  ==========  ==========  ==========  ==========
        {data_table}
        ====================  ===============  ==========  ==========  ==========  ==========  ==========

        Unalign barcode pairs:
        ----------------------

        Top 10 summary table:

        ==================== ====================
        Barcode information  Number
        ==================== ====================
        {pair_table}
        ==================== ====================

        """, output[0], metadata="Author: Junming Xu (xujm@realbio.cn)", FastQC_Reports=input.T1)


rule stat_sample:
    input:
        raw_data = "Split/{contract}/{sample}/" + LIBRARY + ".R1.fastq",
        panda_data = "QC/{contract}/{sample}/pandaseq.fq",
        clean_data = "QC/{contract}/{sample}/high_quality.fq"
    params:
        job_name = "StSa",
    output:
        "QC/{contract}/{sample}/stat"
    run:
        wc_raw_data = int(os.popen("wc -l {0}".format(input.raw_data)).read().strip().split()[0])
        wc_panda_data = int(os.popen("wc -l {0}".format(input.panda_data)).read().strip().split()[0])
        wc_clean_data = int(os.popen("wc -l {0}".format(input.clean_data)).read().strip().split()[0])
        stat_line = "{c:20s}  {s:15s}  {r_n:10d}  {p_n:10d}  {c_n:10d}  ".format(
            c=wildcards.contract, s=wildcards.sample.split("_")[0], r_n=wc_raw_data//4, p_n=wc_panda_data//4, c_n=wc_clean_data//4)
        if wc_raw_data != 0 and wc_panda_data != 0:
            stat_line += "{c_p:9.2f}%  {t_p:9.2f}%\n".format(c_p=wc_clean_data/wc_panda_data*100,
            t_p=wc_clean_data/wc_raw_data*100)
        else:
            stat_line += "{c_p:10d}  {t_p:10d}\n".format(c_p=0, t_p=0)
        if wc_raw_data < wc_panda_data:
            print(os.popen("wc -l {0}".format(input.raw_data)).read().strip())
            print(wc_raw_data)
            print(wc_raw_data//4)
            print(stat_line)
        O = open(output[0], "w")
        O.write(stat_line)
